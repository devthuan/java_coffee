/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.project.GUI;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.project.BUS.ReceiptBUS;
import com.project.BUS.SupplierBUS;
import com.project.Common.Common;
import com.project.DTO.EnterCouponDTO;
import com.project.DTO.SupplierDTO;
import com.toedter.calendar.JCalendar;
import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.JDayChooser;

/**
 *
 * @author thuan
 */
public class Receipt extends javax.swing.JPanel {
        private int option_search = 0;

        /**
         * Creates new form Supplier
         */
        public Receipt() {
                initComponents();

                ArrayList<EnterCouponDTO> list_enterCoupon = ReceiptBUS.getAllEnterCouponsBUS();

                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("ID");
                model.addColumn("Tên phiếu nhập");
                model.addColumn("Nhân viên");
                model.addColumn("Nhà cung cấp");
                model.addColumn("Tổng hoá đơn");
                model.addColumn("Ngày tạo");

                for (EnterCouponDTO enterCoupon : list_enterCoupon) {
                        Object[] rowData = {
                                        enterCoupon.getId(),
                                        enterCoupon.getNameEnterCoupon(),
                                        enterCoupon.getNameEmployee(),
                                        enterCoupon.getNameSupplier(),
                                        Common.formatBigNumber(enterCoupon
                                                        .getTotalValues()),
                                        Common.formatedDateTime(enterCoupon.getCreatedAt())
                        };
                        model.addRow(rowData);
                }
                TableReceipt.setModel(model);
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">
        private void initComponents() {

                ReceiptTop = new javax.swing.JPanel();
                BoxBtn = new javax.swing.JPanel();
                BtnDetail1 = new javax.swing.JButton();
                BtnDetail = new javax.swing.JButton();
                BtnRemove = new javax.swing.JButton();
                BtnExportExcel = new javax.swing.JButton();
                BoxSearch = new javax.swing.JPanel();
                Filter = new javax.swing.JComboBox<>();
                BtnRefresh = new javax.swing.JButton();
                InputSearch = new javax.swing.JTextField();
                BoxTitle = new javax.swing.JPanel();
                TitleReceipt = new javax.swing.JLabel();
                ReceiptCenter = new javax.swing.JPanel();
                jSplitPane1 = new javax.swing.JSplitPane();
                BoxTable = new javax.swing.JPanel();
                jScrollPane1 = new javax.swing.JScrollPane();
                TableReceipt = new javax.swing.JTable();
                BoxFilter = new javax.swing.JPanel();
                ContentFilter = new javax.swing.JPanel();
                ItemFilterStartDay = new javax.swing.JPanel();
                TitleStartDay = new javax.swing.JLabel();
                ValueStart = new JDateChooser();
                ItemFilterEndDay = new javax.swing.JPanel();
                titleEndDay = new javax.swing.JLabel();
                ValueEndDay = new JDateChooser();
                ItemFilterTotalReceiptStart = new javax.swing.JPanel();
                TitleTotalStart = new javax.swing.JLabel();
                ValueTotalStart = new javax.swing.JTextField();
                ItemFilterTotalReceiptEnd = new javax.swing.JPanel();
                TitleTotalEnd = new javax.swing.JLabel();
                ValueTotalEnd = new javax.swing.JTextField();
                BtnFilter = new javax.swing.JButton();

                setMinimumSize(new java.awt.Dimension(1085, 768));
                setName(""); // NOI18N
                setPreferredSize(new java.awt.Dimension(1085, 768));
                setLayout(new java.awt.BorderLayout(0, 5));

                ReceiptTop.setBackground(new java.awt.Color(255, 255, 255));
                ReceiptTop.setPreferredSize(new java.awt.Dimension(608, 170));

                BoxBtn.setBackground(new java.awt.Color(255, 255, 255));
                BoxBtn.setPreferredSize(new java.awt.Dimension(380, 45));
                BoxBtn.setLayout(new java.awt.GridLayout(1, 4, 10, 0));

                BtnDetail1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                BtnDetail1.setIcon(new javax.swing.ImageIcon("./src/assets/icon/plus.png")); // NOI18N
                BtnDetail1.setText("Thêm");
                BtnDetail1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                BtnDetail1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                BtnDetail1.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                BtnDetail1MouseClicked(evt);
                        }
                });
                BoxBtn.add(BtnDetail1);

                BtnDetail.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                BtnDetail.setIcon(new javax.swing.ImageIcon("./src/assets/icon/info-rgb.png")); // NOI18N
                BtnDetail.setText("Chi tiết");
                BtnDetail.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                BtnDetail.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                BtnDetail.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                BtnDetailMouseClicked(evt);
                        }
                });
                BoxBtn.add(BtnDetail);

                BtnRemove.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                BtnRemove.setIcon(new javax.swing.ImageIcon("./src/assets/icon/cancel.png")); // NOI18N
                BtnRemove.setText("Xoá");
                BtnRemove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                BtnRemove.setMargin(new java.awt.Insets(2, 1, 2, 1));
                BtnRemove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                BtnRemove.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                BtnRemoveMouseClicked(evt);
                        }
                });
                BoxBtn.add(BtnRemove);

                BtnExportExcel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                BtnExportExcel.setIcon(new javax.swing.ImageIcon("./src/assets/icon/xls.png")); // NOI18N
                BtnExportExcel.setText("Xuất excel");
                BtnExportExcel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                BtnExportExcel.setMargin(new java.awt.Insets(2, 1, 2, 1));
                BtnExportExcel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                BtnExportExcel.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                BtnExportExcelMouseClicked(evt);
                        }
                });
                BoxBtn.add(BtnExportExcel);

                BoxSearch.setBackground(new java.awt.Color(255, 255, 255));

                Filter.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                Filter.setModel(new javax.swing.DefaultComboBoxModel<>(
                                new String[] { "Tên phiếu nhập", "Tên nhà cung cấp", "Tên nhân viên" }));
                Filter.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                Filter.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                FilterActionPerformed(evt);
                        }

                });
                BtnRefresh.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                BtnRefresh.setIcon(new javax.swing.ImageIcon("./src/assets/icon/refresh.png")); // NOI18N
                BtnRefresh.setText("Làm mới");
                BtnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                BtnRefreshMouseClicked(evt);
                        }
                });

                InputSearch.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                // InputSearch.setText(");
                InputSearch.getDocument().addDocumentListener(new DocumentListener() {
                        @Override
                        public void insertUpdate(DocumentEvent e) {
                                handleChangeInputSearch();
                        }

                        @Override
                        public void removeUpdate(DocumentEvent e) {
                                handleChangeInputSearch();
                        }

                        @Override
                        public void changedUpdate(DocumentEvent e) {
                                handleChangeInputSearch();
                        }

                });

                javax.swing.GroupLayout BoxSearchLayout = new javax.swing.GroupLayout(BoxSearch);
                BoxSearch.setLayout(BoxSearchLayout);
                BoxSearchLayout.setHorizontalGroup(
                                BoxSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BoxSearchLayout
                                                                .createSequentialGroup()
                                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                Short.MAX_VALUE)
                                                                .addComponent(Filter,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                130,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(30, 30, 30)
                                                                .addComponent(InputSearch,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                221,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(31, 31, 31)
                                                                .addComponent(BtnRefresh)));
                BoxSearchLayout.setVerticalGroup(
                                BoxSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(BoxSearchLayout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addGroup(BoxSearchLayout.createParallelGroup(
                                                                                javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                .addComponent(Filter,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                                55,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(InputSearch,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                                55,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(BtnRefresh,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                                55,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addContainerGap(7, Short.MAX_VALUE)));

                BoxTitle.setBackground(new java.awt.Color(255, 255, 255));
                BoxTitle.setLayout(new java.awt.CardLayout());

                TitleReceipt.setBackground(new java.awt.Color(255, 255, 255));
                TitleReceipt.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
                TitleReceipt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                TitleReceipt.setIcon(new javax.swing.ImageIcon("./src/assets/icon/receipt-64.png")); // NOI18N
                TitleReceipt.setText("Quản lý phiếu nhập");
                TitleReceipt.setBorder(
                                javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
                TitleReceipt.setIconTextGap(10);
                BoxTitle.add(TitleReceipt, "card2");

                javax.swing.GroupLayout ReceiptTopLayout = new javax.swing.GroupLayout(ReceiptTop);
                ReceiptTop.setLayout(ReceiptTopLayout);
                ReceiptTopLayout.setHorizontalGroup(
                                ReceiptTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(ReceiptTopLayout.createSequentialGroup()
                                                                .addGap(50, 50, 50)
                                                                .addComponent(BoxBtn,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                                                130, Short.MAX_VALUE)
                                                                .addComponent(BoxSearch,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(41, 41, 41))
                                                .addComponent(BoxTitle, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
                ReceiptTopLayout.setVerticalGroup(
                                ReceiptTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReceiptTopLayout
                                                                .createSequentialGroup()
                                                                .addComponent(BoxTitle,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                72,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(ReceiptTopLayout.createParallelGroup(
                                                                                javax.swing.GroupLayout.Alignment.LEADING,
                                                                                false)
                                                                                .addComponent(BoxBtn,
                                                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                                Short.MAX_VALUE)
                                                                                .addComponent(BoxSearch,
                                                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                                Short.MAX_VALUE))
                                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                Short.MAX_VALUE)));

                add(ReceiptTop, java.awt.BorderLayout.PAGE_START);

                ReceiptCenter.setLayout(new javax.swing.BoxLayout(ReceiptCenter, javax.swing.BoxLayout.LINE_AXIS));

                jSplitPane1.setResizeWeight(0.1);

                BoxTable.setMinimumSize(new java.awt.Dimension(650, 16));
                BoxTable.setLayout(new javax.swing.BoxLayout(BoxTable, javax.swing.BoxLayout.LINE_AXIS));

                TableReceipt.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                TableReceipt.setModel(new javax.swing.table.DefaultTableModel(
                                new Object[][] {
                                                { "test", "test", "test", "test", "test" },
                                                { null, null, null, null, null },
                                                { null, null, null, null, null },
                                                { null, null, null, null, null }
                                },
                                new String[] {
                                                "ID", "Nhà cung cấp", "Nhân viên", "Tổng đơn hàng", "Ngày tạo"
                                }));
                TableReceipt.getTableHeader().setReorderingAllowed(false);
                jScrollPane1.setViewportView(TableReceipt);

                BoxTable.add(jScrollPane1);

                jSplitPane1.setRightComponent(BoxTable);

                BoxFilter.setBackground(new java.awt.Color(255, 255, 255));
                BoxFilter.setMaximumSize(new java.awt.Dimension(500, 32767));
                BoxFilter.setMinimumSize(new java.awt.Dimension(50, 0));
                BoxFilter.setPreferredSize(new java.awt.Dimension(150, 613));
                BoxFilter.setRequestFocusEnabled(false);

                ContentFilter.setBackground(new java.awt.Color(255, 255, 255));
                ContentFilter.setMaximumSize(new java.awt.Dimension(280, 32767));
                ContentFilter.setMinimumSize(new java.awt.Dimension(200, 65));
                ContentFilter.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 15));

                ItemFilterStartDay.setBackground(new java.awt.Color(255, 255, 255));
                ItemFilterStartDay.setPreferredSize(new java.awt.Dimension(150, 70));
                ItemFilterStartDay.setLayout(new java.awt.BorderLayout(0, 5));

                TitleStartDay.setBackground(new java.awt.Color(255, 255, 255));
                TitleStartDay.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                TitleStartDay.setText("Từ ngày");
                TitleStartDay.setPreferredSize(new java.awt.Dimension(37, 25));
                ItemFilterStartDay.add(TitleStartDay, java.awt.BorderLayout.PAGE_START);

                ValueStart.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                ValueStart.setMinimumSize(new java.awt.Dimension(64, 20));
                ValueStart.setPreferredSize(new java.awt.Dimension(64, 20));
                // ValueStart.addActionListener(new java.awt.event.ActionListener() {
                // public void actionPerformed(java.awt.event.ActionEvent evt) {
                // ValueStartActionPerformed(evt);
                // }
                // });
                ItemFilterStartDay.add(ValueStart, java.awt.BorderLayout.CENTER);

                ContentFilter.add(ItemFilterStartDay);

                ItemFilterEndDay.setBackground(new java.awt.Color(255, 255, 255));
                ItemFilterEndDay.setPreferredSize(new java.awt.Dimension(150, 70));
                ItemFilterEndDay.setLayout(new java.awt.BorderLayout(0, 5));

                titleEndDay.setBackground(new java.awt.Color(255, 255, 255));
                titleEndDay.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                titleEndDay.setText("Đến ngày");
                titleEndDay.setPreferredSize(new java.awt.Dimension(37, 25));
                ItemFilterEndDay.add(titleEndDay, java.awt.BorderLayout.PAGE_START);

                ValueEndDay.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                ValueEndDay.setPreferredSize(new java.awt.Dimension(64, 20));
                ItemFilterEndDay.add(ValueEndDay, java.awt.BorderLayout.CENTER);

                ContentFilter.add(ItemFilterEndDay);

                ItemFilterTotalReceiptStart.setBackground(new java.awt.Color(255, 255, 255));
                ItemFilterTotalReceiptStart.setPreferredSize(new java.awt.Dimension(150, 70));
                ItemFilterTotalReceiptStart.setLayout(new java.awt.BorderLayout(0, 5));

                TitleTotalStart.setBackground(new java.awt.Color(255, 255, 255));
                TitleTotalStart.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                TitleTotalStart.setText("Tổng đơn hàng từ");
                TitleTotalStart.setPreferredSize(new java.awt.Dimension(37, 25));
                ItemFilterTotalReceiptStart.add(TitleTotalStart, java.awt.BorderLayout.PAGE_START);

                ValueTotalStart.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                ItemFilterTotalReceiptStart.add(ValueTotalStart, java.awt.BorderLayout.CENTER);

                ContentFilter.add(ItemFilterTotalReceiptStart);

                ItemFilterTotalReceiptEnd.setBackground(new java.awt.Color(255, 255, 255));
                ItemFilterTotalReceiptEnd.setPreferredSize(new java.awt.Dimension(150, 70));
                ItemFilterTotalReceiptEnd.setLayout(new java.awt.BorderLayout(0, 5));

                TitleTotalEnd.setBackground(new java.awt.Color(255, 255, 255));
                TitleTotalEnd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                TitleTotalEnd.setText("Tổng đơn hàng đến");
                TitleTotalEnd.setPreferredSize(new java.awt.Dimension(37, 25));
                ItemFilterTotalReceiptEnd.add(TitleTotalEnd, java.awt.BorderLayout.PAGE_START);

                ValueTotalEnd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                ValueTotalEnd.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                ValueTotalEndActionPerformed(evt);
                        }
                });
                ItemFilterTotalReceiptEnd.add(ValueTotalEnd, java.awt.BorderLayout.CENTER);

                ContentFilter.add(ItemFilterTotalReceiptEnd);

                BtnFilter.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
                BtnFilter.setIcon(new javax.swing.ImageIcon("./src/assets/icon/filter-32.png")); // NOI18N
                BtnFilter.setText("Lọc");
                BtnFilter.setIconTextGap(10);
                BtnFilter.setPreferredSize(new java.awt.Dimension(100, 40));
                BtnFilter.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                BtnFilterMouseClicked(evt);
                        }
                });
                ContentFilter.add(BtnFilter);

                javax.swing.GroupLayout BoxFilterLayout = new javax.swing.GroupLayout(BoxFilter);
                BoxFilter.setLayout(BoxFilterLayout);
                BoxFilterLayout.setHorizontalGroup(
                                BoxFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(ContentFilter, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                197, Short.MAX_VALUE));
                BoxFilterLayout.setVerticalGroup(
                                BoxFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(ContentFilter, javax.swing.GroupLayout.Alignment.TRAILING,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, 613,
                                                                Short.MAX_VALUE));

                jSplitPane1.setLeftComponent(BoxFilter);

                ReceiptCenter.add(jSplitPane1);

                add(ReceiptCenter, java.awt.BorderLayout.CENTER);
        }// </editor-fold>

        private void FilterActionPerformed(ActionEvent evt) {
                int option = Filter.getSelectedIndex();
                option_search = option;
        }

        private void ValueTotalEndActionPerformed(java.awt.event.ActionEvent evt) {
                // TODO add your handling code here:
        }

        private void BtnDetailMouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = TableReceipt.getSelectedRow();
                if (selectedRow != -1) {
                        try {
                                int id = (int) TableReceipt.getValueAt(selectedRow, 0);
                                String nameEnterCoupon = (String) TableReceipt.getValueAt(selectedRow, 1);
                                String nameEmployee = (String) TableReceipt.getValueAt(selectedRow, 2);
                                String nameSupplier = (String) TableReceipt.getValueAt(selectedRow, 3);
                                String total = (String) TableReceipt.getValueAt(selectedRow, 4);
                                String createdAt = (String) TableReceipt.getValueAt(selectedRow, 5);
                                LocalDateTime createAtformat = Common.convertStringtoLocalDateTime(createdAt);
                                EnterCouponDTO data = new EnterCouponDTO(id, nameEnterCoupon, nameEmployee,
                                                nameSupplier, Float.parseFloat(total),
                                                createAtformat);
                                new FormDetailReceipt(data).setVisible(true);
                        } catch (NumberFormatException e) {
                                JOptionPane.showMessageDialog(null, "Lỗi: ID không hợp lệ.");
                        }
                } else {
                        JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng để xem chi tiết.");
                }
        }

        private void BtnRefreshMouseClicked(java.awt.event.MouseEvent evt) {

                DefaultTableModel model = (DefaultTableModel) TableReceipt.getModel();
                model.setRowCount(0); // Xóa tất cả các hàng
                InputSearch.setText("");
                ValueStart.setDate(null);
                ValueEndDay.setDate(null);
                ValueTotalStart.setText("");
                ValueTotalEnd.setText("");
                
                ArrayList<EnterCouponDTO> list_enterCoupon = ReceiptBUS.getAllEnterCouponsBUS();
                for (EnterCouponDTO enterCoupon : list_enterCoupon) {
                        Object[] rowData = {
                                        enterCoupon.getId(),
                                        enterCoupon.getNameEnterCoupon(),
                                        enterCoupon.getNameEmployee(),
                                        enterCoupon.getNameSupplier(),
                                        Common.formatBigNumber(enterCoupon
                                                        .getTotalValues()),
                                        Common.formatedDateTime(enterCoupon.getCreatedAt())
                        };
                        model.addRow(rowData);
                }
        }

        private void BtnFilterMouseClicked(java.awt.event.MouseEvent evt) {
                Date startDate = ValueStart.getDate();
                Date endDate = ValueEndDay.getDate();
                String startTotalText = ValueTotalStart.getText();
                String endTotalText = ValueTotalEnd.getText();

                int startTotal = -1;
                int endTotal = -1;
                String formatedStartDate = null;
                String formatedEndDate = null;
                if (startDate == null && endDate == null && startTotalText.isEmpty() && endTotalText.isEmpty()) {
                        return;
                }

                if (startDate != null || endDate != null) {
                        if (startDate == null || endDate == null) {
                                JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ giá trị ngày");
                                return;
                        }
                        if (startDate.compareTo(endDate) > 0) {
                                JOptionPane.showMessageDialog(null, "Ngày bắt đầu phải nhỏ hơn ngày kết thúc");
                                return;
                        }

                        formatedStartDate = Common.formateDate(startDate);
                        formatedEndDate = Common.formateDate(endDate);

                }
                if (!startTotalText.isEmpty() || !endTotalText.isEmpty()) {
                        if (startTotalText.isEmpty() || endTotalText.isEmpty()) {
                                JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ giá trị tổng hoá đơn");
                                return;
                        }
                        try {
                                startTotal = Integer.parseInt(ValueTotalStart.getText());
                                endTotal = Integer.parseInt(ValueTotalEnd.getText());

                                if (startTotal > endTotal) {
                                        JOptionPane.showMessageDialog(null,
                                                        "Tổng tiền bắt đầu phải nhỏ hơn tổng tiền kết thúc.");
                                        return;
                                }

                        } catch (Exception e) {

                                JOptionPane.showMessageDialog(null, "Nhập dữ liệu là số");
                                return;
                        }

                }

                DefaultTableModel model = (DefaultTableModel) TableReceipt.getModel();
                model.setRowCount(0); // Xóa tất cả các hàng

                ArrayList<EnterCouponDTO> list_enterCoupon = ReceiptBUS.searchReceiptAdvanced(formatedStartDate,
                                formatedEndDate, startTotal, endTotal);
                if (list_enterCoupon == null) {
                        JOptionPane.showMessageDialog(null, "Có lỗi xảy ra!");
                        return;
                }
                for (EnterCouponDTO enterCoupon : list_enterCoupon) {
                        Object[] rowData = {
                                        enterCoupon.getId(),
                                        enterCoupon.getNameEnterCoupon(),
                                        enterCoupon.getNameEmployee(),
                                        enterCoupon.getNameSupplier(),
                                        Common.formatBigNumber(enterCoupon
                                                        .getTotalValues()),
                                        Common.formatedDateTime(enterCoupon.getCreatedAt())
                        };
                        model.addRow(rowData);
                }

        }

        private void BtnRemoveMouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = TableReceipt.getSelectedRow();
                if (selectedRow != -1) {
                        try {
                                int id = (int) TableReceipt.getValueAt(selectedRow, 0);
                                // Hiển thị hộp thoại xác nhận
                                int option = JOptionPane.showConfirmDialog(null,
                                                "Bạn có chắc chắn muốn xoá nhà cung cấp này?", "Xác nhận xoá",
                                                JOptionPane.YES_NO_OPTION);
                                if (option == JOptionPane.YES_OPTION) {
                                        boolean check_remove = ReceiptBUS.removeEnterCouponBUS(id);
                                        if (check_remove) {
                                                JOptionPane.showMessageDialog(null,
                                                                "Nhà cung cấp đã được xoá thành công.");
                                                // Nếu xoá thành công, cập nhật lại JTable hoặc các thành phần khác cần
                                                // thiết
                                        } else {
                                                JOptionPane.showMessageDialog(null, "Không thể xoá nhà cung cấp này.");
                                        }
                                }
                        } catch (NumberFormatException e) {
                                JOptionPane.showMessageDialog(null, "Lỗi: ID không hợp lệ.");
                        }
                } else {
                        JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng để xem chi tiết.");
                }
        }

        private void BtnExportExcelMouseClicked(java.awt.event.MouseEvent evt) {
                exportToExcel();
        }

        private void ValueStartActionPerformed(java.awt.event.ActionEvent evt) {
                // TODO add your handling code here:
        }

        private void handleChangeInputSearch() {
                DefaultTableModel model = (DefaultTableModel) TableReceipt.getModel();
                model.setRowCount(0); // Xóa tất cả các hàng

                String search_enterCoupon = InputSearch.getText();
                ArrayList<EnterCouponDTO> list_enterCoupon = null;
                if (option_search == 0) {
                        list_enterCoupon = ReceiptBUS.searchEnterCouponsByNameBUS(search_enterCoupon);

                } else if (option_search == 1) {
                        list_enterCoupon = ReceiptBUS.searchEnterCouponsBySupplierBUS(search_enterCoupon);
                } else if (option_search == 2) {
                        list_enterCoupon = ReceiptBUS.searchEnterCouponsByEmployeeBUS(search_enterCoupon);
                }

                for (EnterCouponDTO enterCoupon : list_enterCoupon) {
                        Object[] rowData = {
                                        enterCoupon.getId(),
                                        enterCoupon.getNameEnterCoupon(),
                                        enterCoupon.getNameEmployee(),
                                        enterCoupon.getNameSupplier(),
                                        Common.formatBigNumber(enterCoupon
                                                        .getTotalValues()),
                                        Common.formatedDateTime(enterCoupon.getCreatedAt())
                        };
                        model.addRow(rowData);
                }
        }

        private void BtnDetail1MouseClicked(java.awt.event.MouseEvent evt) {
                new FormCreateEnterCoupon().setVisible(true);
        }

        private void exportToExcel() {
                JFileChooser fileChooser = new JFileChooser(); // Tạo một JFileChooser

                // Thiết lập hộp thoại để chọn tệp và đặt tiêu đề
                fileChooser.setDialogTitle("Chọn nơi lưu tệp Excel");

                int userSelection = fileChooser.showSaveDialog(this); // Hiển thị hộp thoại và chờ người dùng chọn nơi
                                                                      // lưu

                // Kiểm tra xem người dùng đã chọn "Save" hay chưa
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                        try {
                                File fileToSave = fileChooser.getSelectedFile(); // Lấy đường dẫn được chọn bởi người
                                                                                 // dùng

                                // Ghi dữ liệu vào tệp Excel
                                try (Workbook workbook = new XSSFWorkbook()) {
                                        Sheet sheet = workbook.createSheet("Sheet1");

                                        // Lấy mô hình của JTable
                                        DefaultTableModel model = (DefaultTableModel) TableReceipt.getModel();
                                        // Viết tiêu đề cột
                                        Row headerRow = sheet.createRow(0);
                                        for (int col = 0; col < model.getColumnCount(); col++) {
                                                headerRow.createCell(col).setCellValue(model.getColumnName(col));
                                        }

                                        // Viết dữ liệu từ JTable vào tệp Excel
                                        for (int row = 0; row < model.getRowCount(); row++) {
                                                Row excelRow = sheet.createRow(row + 1); // Bắt đầu từ hàng thứ 2 (hàng
                                                                                         // đầu tiên là tiêu đề)
                                                for (int col = 0; col < model.getColumnCount(); col++) {
                                                        Object cellValue = model.getValueAt(row, col);
                                                        if (cellValue != null) {
                                                                Cell excelCell = excelRow.createCell(col);
                                                                if (cellValue instanceof String) {
                                                                        excelCell.setCellValue((String) cellValue);
                                                                } else if (cellValue instanceof Integer) {
                                                                        excelCell.setCellValue((Integer) cellValue);
                                                                } else if (cellValue instanceof LocalDate) {
                                                                        System.out.println(cellValue);
                                                                        String stringValue = ((LocalDate) cellValue)
                                                                                        .format(DateTimeFormatter
                                                                                                        .ofPattern("yyyy-MM-dd"));
                                                                        excelCell.setCellValue(stringValue);
                                                                } // Và có thể thêm các kiểu dữ liệu khác tùy theo nhu
                                                                  // cầu
                                                        }
                                                }
                                        }

                                        // Ghi vào tệp Excel
                                        try (FileOutputStream outputStream = new FileOutputStream(
                                                        fileToSave + ".xlsx")) {
                                                workbook.write(outputStream);
                                        }
                                        JOptionPane.showMessageDialog(null, "Xuất file excel thành công.");
                                }
                        } catch (IOException e) {
                                e.printStackTrace();
                        }
                }
        }

        // Variables declaration - do not modify
        private javax.swing.JPanel BoxBtn;
        private javax.swing.JPanel BoxFilter;
        private javax.swing.JPanel BoxSearch;
        private javax.swing.JPanel BoxTable;
        private javax.swing.JPanel BoxTitle;
        private javax.swing.JButton BtnDetail;
        private javax.swing.JButton BtnDetail1;
        private javax.swing.JButton BtnExportExcel;
        private javax.swing.JButton BtnFilter;
        private javax.swing.JButton BtnRefresh;
        private javax.swing.JButton BtnRemove;
        private javax.swing.JPanel ContentFilter;
        private javax.swing.JComboBox<String> Filter;
        private javax.swing.JTextField InputSearch;
        private javax.swing.JPanel ItemFilterEndDay;
        private javax.swing.JPanel ItemFilterStartDay;
        private javax.swing.JPanel ItemFilterTotalReceiptEnd;
        private javax.swing.JPanel ItemFilterTotalReceiptStart;
        private javax.swing.JPanel ReceiptCenter;
        private javax.swing.JPanel ReceiptTop;
        private javax.swing.JTable TableReceipt;
        private javax.swing.JLabel TitleReceipt;
        private javax.swing.JLabel TitleStartDay;
        private javax.swing.JLabel TitleTotalEnd;
        private javax.swing.JLabel TitleTotalStart;
        private JDateChooser ValueEndDay;
        private JDateChooser ValueStart;
        private javax.swing.JTextField ValueTotalEnd;
        private javax.swing.JTextField ValueTotalStart;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JSplitPane jSplitPane1;
        private javax.swing.JLabel titleEndDay;
        // End of variables declaration
}
