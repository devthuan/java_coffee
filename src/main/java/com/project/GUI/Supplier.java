/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.project.GUI;

import java.awt.Cursor;
import java.awt.event.ComponentAdapter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.regex.Pattern;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.xmlbeans.impl.regex.REUtil;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import com.project.BUS.SupplierBUS;
import com.project.Common.Common;
import com.project.Common.SupplierCommon;
import com.project.DTO.PermissionAccount;
import com.project.DTO.SupplierDTO;
import com.project.Util.Formatter;

/**
 *
 * @author thuan
 */
public class Supplier extends javax.swing.JPanel {
        private int option_search = 0;
        private PermissionAccount permissionList;

        /**
         * Creates new form Supplier
         */
        public Supplier() {
                initComponents();
                permissionList = PermissionAccount.getInstance();

                ArrayList<SupplierDTO> list_supplier = SupplierBUS.get_all_supplier();

                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("ID");
                model.addColumn("Tên nhà cung cấp");
                model.addColumn("Địa chỉ");
                model.addColumn("Số điện thoại");
                model.addColumn("Email");
                model.addColumn("Ngày tạo");
                model.addColumn("Cập nhật cuối");

                for (SupplierDTO supplier : list_supplier) {
                        Object[] rowData = {
                                        supplier.getId(),
                                        supplier.getName_supplier(),
                                        supplier.getAddress(),
                                        supplier.getPhone(),
                                        supplier.getEmail(),
                                        Common.formatedDateTime(supplier.getCreatedAt()),
                                        Common.formatedDateTime(supplier.getupdatedAt())
                        };
                        model.addRow(rowData);
                }
                TableSupplier.setModel(model);
                Formatter.setBoldHeaderTable(TableSupplier);
                Formatter.centerAlignTableCells(TableSupplier);
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">
        private void initComponents() {

                SupplierTop = new javax.swing.JPanel();
                BoxTitle = new javax.swing.JPanel();
                TitleLabel = new javax.swing.JLabel();
                BoxBtn = new javax.swing.JPanel();
                BtnAdd = new javax.swing.JToggleButton();
                BtnDetail = new javax.swing.JToggleButton();
                BtnRemove = new javax.swing.JToggleButton();
                BtnImportExcel = new javax.swing.JToggleButton();
                BtnExportExcel = new javax.swing.JToggleButton();
                BoxSearch = new javax.swing.JPanel();
                Filter = new javax.swing.JComboBox<>();
                BtnRefresh = new javax.swing.JButton();
                InputSearch = new javax.swing.JTextField();
                SupplierCenter = new javax.swing.JPanel();
                jScrollPane1 = new javax.swing.JScrollPane();
                TableSupplier = new javax.swing.JTable();

                BtnAdd.setCursor(new java.awt.Cursor(Cursor.HAND_CURSOR));
                BtnDetail.setCursor(new java.awt.Cursor(Cursor.HAND_CURSOR));
                BtnRemove.setCursor(new java.awt.Cursor(Cursor.HAND_CURSOR));
                BtnImportExcel.setCursor(new java.awt.Cursor(Cursor.HAND_CURSOR));
                BtnExportExcel.setCursor(new java.awt.Cursor(Cursor.HAND_CURSOR));
                BtnRefresh.setCursor(new java.awt.Cursor(Cursor.HAND_CURSOR));

                setMinimumSize(new java.awt.Dimension(1085, 768));
                setName(""); // NOI18N
                setPreferredSize(new java.awt.Dimension(1085, 768));
                setLayout(new java.awt.BorderLayout());

                SupplierTop.setBackground(new java.awt.Color(255, 255, 255));
                SupplierTop.setPreferredSize(new java.awt.Dimension(608, 170));

                BoxTitle.setBackground(new java.awt.Color(255, 255, 255));
                BoxTitle.setMinimumSize(new java.awt.Dimension(0, 84));
                BoxTitle.setLayout(new java.awt.CardLayout());

                TitleLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
                TitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                TitleLabel.setIcon(new javax.swing.ImageIcon("./src/assets/icon/supplier-64.png")); // NOI18N
                TitleLabel.setText("Quản lý nhà cung cấp");
                TitleLabel.setBorder(
                                javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
                TitleLabel.setIconTextGap(20);
                TitleLabel.setPreferredSize(new java.awt.Dimension(0, 84));
                TitleLabel.setRequestFocusEnabled(false);
                BoxTitle.add(TitleLabel, "card2");

                BoxBtn.setBackground(new java.awt.Color(255, 255, 255));
                BoxBtn.setLayout(new java.awt.GridLayout(1, 5, 5, 0));

                BtnAdd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                BtnAdd.setIcon(new javax.swing.ImageIcon("./src/assets/icon/plus.png")); // NOI18N
                BtnAdd.setText("Thêm");
                BtnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                BtnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                BtnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                BtnAddMouseClicked(evt);
                        }
                });
                BoxBtn.add(BtnAdd);

                BtnDetail.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                BtnDetail.setIcon(new javax.swing.ImageIcon("./src/assets/icon/info-rgb.png")); // NOI18N
                BtnDetail.setText("Chi tiết");
                BtnDetail.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                BtnDetail.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                BtnDetail.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                BtnDetailMouseClicked(evt);
                        }
                });
                BoxBtn.add(BtnDetail);

                BtnRemove.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                BtnRemove.setIcon(new javax.swing.ImageIcon("./src/assets/icon/cancel.png")); // NOI18N
                BtnRemove.setText("Xoá");
                BtnRemove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                BtnRemove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                BtnRemove.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                BtnRemoveMouseClicked(evt);
                        }
                });
                BoxBtn.add(BtnRemove);

                BtnImportExcel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                BtnImportExcel.setIcon(new javax.swing.ImageIcon("./src/assets/icon/upload-file.png")); // NOI18N
                BtnImportExcel.setText("Nhập excel");
                BtnImportExcel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                BtnImportExcel.setMargin(new java.awt.Insets(2, 1, 2, 1));
                BtnImportExcel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                BtnImportExcel.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                BtnImportExcelMouseClicked(evt);
                        }
                });
                BoxBtn.add(BtnImportExcel);

                BtnExportExcel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                BtnExportExcel.setIcon(new javax.swing.ImageIcon("./src/assets/icon/xls.png")); // NOI18N
                BtnExportExcel.setText("Xuất excel");
                BtnExportExcel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                BtnExportExcel.setMargin(new java.awt.Insets(2, 1, 2, 1));
                BtnExportExcel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                BtnExportExcel.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                BtnExportExcelMouseClicked(evt);
                        }
                });
                BoxBtn.add(BtnExportExcel);

                BoxSearch.setBackground(new java.awt.Color(255, 255, 255));

                Filter.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                Filter.setModel(new javax.swing.DefaultComboBoxModel<>(
                                new String[] { "Theo tên", "Theo email" }));
                Filter.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                Filter.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                FilterActionPerformed(evt);
                        }
                });

                BtnRefresh.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                BtnRefresh.setIcon(new javax.swing.ImageIcon("./src/assets/icon/refresh.png")); // NOI18N
                BtnRefresh.setText("Làm mới");
                BtnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                BtnRefreshMouseClicked(evt);
                        }
                });

                InputSearch.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
                // InputSearch.setText("Tìm kiếm.....");
                Formatter.setPlaceHolder(InputSearch, "Nhập từ khóa tìm kiếm");
                InputSearch.getDocument().addDocumentListener(new DocumentListener() {
                        @Override
                        public void insertUpdate(DocumentEvent e) {
                                handleChangeInputSearch();
                        }

                        @Override
                        public void removeUpdate(DocumentEvent e) {
                                handleChangeInputSearch();
                        }

                        @Override
                        public void changedUpdate(DocumentEvent e) {
                                handleChangeInputSearch();
                        }

                });
                javax.swing.GroupLayout BoxSearchLayout = new javax.swing.GroupLayout(BoxSearch);
                BoxSearch.setLayout(BoxSearchLayout);
                BoxSearchLayout.setHorizontalGroup(
                                BoxSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BoxSearchLayout
                                                                .createSequentialGroup()
                                                                .addContainerGap()
                                                                .addComponent(Filter,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                119,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(InputSearch,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                256,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(BtnRefresh)
                                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                Short.MAX_VALUE)));
                BoxSearchLayout.setVerticalGroup(
                                BoxSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(BoxSearchLayout.createSequentialGroup()
                                                                .addGap(10, 10, 10)
                                                                .addGroup(BoxSearchLayout.createParallelGroup(
                                                                                javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                .addComponent(Filter,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                                55,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(InputSearch,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                                55,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(BtnRefresh,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                                55,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                Short.MAX_VALUE)));

                javax.swing.GroupLayout SupplierTopLayout = new javax.swing.GroupLayout(SupplierTop);
                SupplierTop.setLayout(SupplierTopLayout);
                SupplierTopLayout.setHorizontalGroup(
                                SupplierTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(SupplierTopLayout.createSequentialGroup()
                                                                .addGap(21, 21, 21)
                                                                .addComponent(BoxBtn,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                458,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                                                37, Short.MAX_VALUE)
                                                                .addComponent(BoxSearch,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(26, 26, 26))
                                                .addComponent(BoxTitle, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
                SupplierTopLayout.setVerticalGroup(
                                SupplierTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SupplierTopLayout
                                                                .createSequentialGroup()
                                                                .addComponent(BoxTitle,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(SupplierTopLayout.createParallelGroup(
                                                                                javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(BoxSearch,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(BoxBtn,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                                71,
                                                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addContainerGap(9, Short.MAX_VALUE)));

                add(SupplierTop, java.awt.BorderLayout.PAGE_START);

                SupplierCenter.setLayout(new javax.swing.BoxLayout(SupplierCenter, javax.swing.BoxLayout.LINE_AXIS));

                TableSupplier.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

                TableSupplier.setShowGrid(true);

                TableSupplier.getTableHeader().setReorderingAllowed(false);
                jScrollPane1.setViewportView(TableSupplier);

                SupplierCenter.add(jScrollPane1);

                add(SupplierCenter, java.awt.BorderLayout.CENTER);
        }// </editor-fold>

        private void FilterActionPerformed(java.awt.event.ActionEvent evt) {
                int option = Filter.getSelectedIndex();
                option_search = option;
                InputSearch.requestFocus();
        }

        private void BtnAddMouseClicked(java.awt.event.MouseEvent evt) {
                if (permissionList.hasPermission("CREATE_SUPPLIER")) {

                        new FormSupplier("Thêm nhà cung cấp", new SupplierDTO()).setVisible(true);
                } else {
                        JOptionPane.showMessageDialog(null, "Bạn không có quyền truy cập");
                        return;
                }
        }

        private void BtnDetailMouseClicked(java.awt.event.MouseEvent evt) {
                if (permissionList.hasPermission("UPDATE_SUPPLIER")) {

                        int selectedRow = TableSupplier.getSelectedRow();
                        if (selectedRow != -1) {
                                try {
                                        int id = (int) TableSupplier.getValueAt(selectedRow, 0);
                                        String name = (String) TableSupplier.getValueAt(selectedRow, 1);
                                        String address = (String) TableSupplier.getValueAt(selectedRow, 2);
                                        String phone = (String) TableSupplier.getValueAt(selectedRow, 3);
                                        String email = (String) TableSupplier.getValueAt(selectedRow, 4);

                                        SupplierDTO update_supplier = new SupplierDTO(id, name, address, phone, email);

                                        new FormSupplier("Chi tiết nhà cung cấp", update_supplier).setVisible(true);
                                } catch (NumberFormatException e) {
                                        JOptionPane.showMessageDialog(null, "Lỗi: ID không hợp lệ.");
                                }
                        } else {
                                JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng để xem chi tiết.");
                        }
                } else {
                        JOptionPane.showMessageDialog(null, "Bạn không có quyền truy cập");
                        return;
                }

        }

        private void BtnRemoveMouseClicked(java.awt.event.MouseEvent evt) {

                if (permissionList.hasPermission("DELETE_SUPPLIER")) {
                        int selectedRow = TableSupplier.getSelectedRow();
                        if (selectedRow != -1) {
                                try {
                                        int id = (int) TableSupplier.getValueAt(selectedRow, 0);
                                        // Hiển thị hộp thoại xác nhận
                                        int option = JOptionPane.showConfirmDialog(null,
                                                        "Bạn có chắc chắn muốn xoá nhà cung cấp này?", "Xác nhận xoá",
                                                        JOptionPane.YES_NO_OPTION);
                                        if (option == JOptionPane.YES_OPTION) {
                                                boolean check_remove = SupplierBUS.removeSupplier(id);
                                                if (check_remove) {
                                                        JOptionPane.showMessageDialog(null,
                                                                        "Nhà cung cấp đã được xoá thành công.");
                                                        // Nếu xoá thành công, cập nhật lại JTable hoặc các thành phần
                                                        // khác cần
                                                        // thiết
                                                } else {
                                                        JOptionPane.showMessageDialog(null,
                                                                        "Không thể xoá nhà cung cấp này.");
                                                }
                                        }
                                } catch (NumberFormatException e) {
                                        JOptionPane.showMessageDialog(null, "Lỗi: ID không hợp lệ.");
                                }
                        } else {
                                JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng để xem chi tiết.");
                        }

                } else {
                        JOptionPane.showMessageDialog(null, "Bạn không có quyền truy cập");
                        return;
                }

        }

        private void BtnImportExcelMouseClicked(java.awt.event.MouseEvent evt) {
                if (permissionList.hasPermission("IMPORT_SUPPLIER")) {
                        try {
                                JFileChooser fileChooser = new JFileChooser();
                                fileChooser.setDialogTitle("Chọn file excel");
                                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                                fileChooser.setFileFilter(new FileNameExtensionFilter("Excel files", "xlsx", "xls"));

                                int result = fileChooser.showOpenDialog(this);

                                if (result == JFileChooser.APPROVE_OPTION) {
                                        File selected_file = fileChooser.getSelectedFile();
                                        if (importExcelData(selected_file)) {
                                                JOptionPane.showMessageDialog(null, "Nhập file excel thành công.");
                                        } else {
                                                JOptionPane.showMessageDialog(null, "Nhập file excel thất bại.");

                                        }
                                }

                        } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Có lỗi xảy ra, vui lòng chọn đúng file excel.");
                                return;
                        }
                } else {
                        JOptionPane.showMessageDialog(null, "Bạn không có quyền truy cập");
                        return;
                }

        }

        private void BtnExportExcelMouseClicked(java.awt.event.MouseEvent evt) {
                if (permissionList.hasPermission("EXPORT_SUPPLIER")) {
                        exportToExcel();

                } else {
                        JOptionPane.showMessageDialog(null, "Bạn không có quyền truy cập");
                        return;
                }
        }

        private void BtnRefreshMouseClicked(java.awt.event.MouseEvent evt) {
                // Xóa dữ liệu hiện tại trong JTable
                DefaultTableModel model = (DefaultTableModel) TableSupplier.getModel();
                model.setRowCount(0); // Xóa tất cả các hàng

                // Lấy danh sách nhà cung cấp mới từ SupplierBUS
                ArrayList<SupplierDTO> list_supplier = SupplierBUS.get_all_supplier();

                // Thêm dữ liệu mới vào JTable
                for (SupplierDTO supplier : list_supplier) {
                        Object[] rowData = {
                                        supplier.getId(),
                                        supplier.getName_supplier(),
                                        supplier.getAddress(),
                                        supplier.getPhone(),
                                        supplier.getEmail(),
                                        supplier.getCreatedAt(),
                                        supplier.getupdatedAt()
                        };
                        model.addRow(rowData);
                }
        }

        private void handleChangeInputSearch() {
                DefaultTableModel model = (DefaultTableModel) TableSupplier.getModel();
                model.setRowCount(0); // Xóa tất cả các hàng

                // Lấy danh sách nhà cung cấp mới từ SupplierBUS
                ArrayList<SupplierDTO> list_supplier;
                if (option_search == 0) {
                        list_supplier = SupplierBUS.searchSupplierByNameBUS(InputSearch.getText());
                } else {
                        list_supplier = SupplierBUS.searchSupplierByEmailBUS(InputSearch.getText());

                }
                // Thêm dữ liệu mới vào JTable
                for (SupplierDTO supplier : list_supplier) {
                        Object[] rowData = {
                                        supplier.getId(),
                                        supplier.getName_supplier(),
                                        supplier.getAddress(),
                                        supplier.getPhone(),
                                        supplier.getEmail(),
                                        Common.formatedDateTime(supplier.getCreatedAt()),
                                        Common.formatedDateTime(supplier.getupdatedAt())
                        };
                        model.addRow(rowData);
                }
        }

        private Boolean importExcelData(File file) {
                try {
                        FileInputStream inputStream = new FileInputStream(file);
                        Workbook workbook = new XSSFWorkbook(inputStream);

                        Sheet sheet = workbook.getSheetAt(0); // Lấy sheet đầu tiên

                        DefaultTableModel model = (DefaultTableModel) TableSupplier.getModel();
                        boolean firstRow = true;
                        boolean firstRow2 = true;
                        boolean checkValidate = false;

                        for (Row row : sheet) {
                                if (firstRow) {
                                        firstRow = false;
                                        continue;
                                }
                                String name_supplier = row.getCell(0).getStringCellValue();
                                String address = row.getCell(1).getStringCellValue();
                                String phone = row.getCell(2).getStringCellValue();
                                String email = row.getCell(3).getStringCellValue();
                                checkValidate = SupplierCommon.validateCreateSupplier(name_supplier, address, phone,
                                                email);
                        }
                        if (checkValidate == true) {
                                for (Row row : sheet) {
                                        if (firstRow2) {
                                                firstRow2 = false;
                                                continue;
                                        }
                                        String name_supplier = row.getCell(0).getStringCellValue();
                                        String address = row.getCell(1).getStringCellValue();
                                        String phone = row.getCell(2).getStringCellValue();
                                        String email = row.getCell(3).getStringCellValue();
                                        SupplierDTO new_supplier = new SupplierDTO(name_supplier, address, phone,
                                                        email);
                                        SupplierBUS.createdSupplier(new_supplier);
                                        Object[] rowData = {
                                                        "-1",
                                                        row.getCell(0),
                                                        row.getCell(1),
                                                        row.getCell(2),
                                                        row.getCell(3)
                                        };
                                        model.addRow(rowData);
                                }
                                return true;
                        } else {
                                return false;
                        }

                } catch (IOException ex) {
                        ex.printStackTrace();
                        return false;
                }
        }

        private void exportToExcel() {
                JFileChooser fileChooser = new JFileChooser(); // Tạo một JFileChooser

                // Thiết lập hộp thoại để chọn tệp và đặt tiêu đề
                fileChooser.setDialogTitle("Chọn nơi lưu tệp Excel");

                int userSelection = fileChooser.showSaveDialog(this); // Hiển thị hộp thoại và chờ người dùng chọn nơi
                                                                      // lưu

                // Kiểm tra xem người dùng đã chọn "Save" hay chưa
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                        try {
                                File fileToSave = fileChooser.getSelectedFile(); // Lấy đường dẫn được chọn bởi người
                                                                                 // dùng

                                // Ghi dữ liệu vào tệp Excel
                                try (Workbook workbook = new XSSFWorkbook()) {
                                        Sheet sheet = workbook.createSheet("Sheet1");

                                        // Lấy mô hình của JTable
                                        DefaultTableModel model = (DefaultTableModel) TableSupplier.getModel();
                                        // Viết tiêu đề cột
                                        Row headerRow = sheet.createRow(0);
                                        for (int col = 0; col < model.getColumnCount(); col++) {
                                                headerRow.createCell(col).setCellValue(model.getColumnName(col));
                                        }

                                        // Viết dữ liệu từ JTable vào tệp Excel
                                        for (int row = 0; row < model.getRowCount(); row++) {
                                                Row excelRow = sheet.createRow(row + 1); // Bắt đầu từ hàng thứ 2 (hàng
                                                                                         // đầu tiên là tiêu đề)
                                                for (int col = 0; col < model.getColumnCount(); col++) {
                                                        Object cellValue = model.getValueAt(row, col);
                                                        if (cellValue != null) {
                                                                Cell excelCell = excelRow.createCell(col);
                                                                if (cellValue instanceof String) {
                                                                        excelCell.setCellValue((String) cellValue);
                                                                } else if (cellValue instanceof Integer) {
                                                                        excelCell.setCellValue((Integer) cellValue);
                                                                } else if (cellValue instanceof LocalDate) {
                                                                        System.out.println(cellValue);
                                                                        String stringValue = ((LocalDate) cellValue)
                                                                                        .format(DateTimeFormatter
                                                                                                        .ofPattern("yyyy-MM-dd"));
                                                                        excelCell.setCellValue(stringValue);
                                                                } // Và có thể thêm các kiểu dữ liệu khác tùy theo nhu
                                                                  // cầu
                                                        }
                                                }
                                        }

                                        // Ghi vào tệp Excel
                                        try (FileOutputStream outputStream = new FileOutputStream(
                                                        fileToSave + ".xlsx")) {
                                                workbook.write(outputStream);
                                        }
                                        JOptionPane.showMessageDialog(null, "Xuất file excel thành công.");
                                }
                        } catch (IOException e) {
                                e.printStackTrace();
                        }
                }
        }

        // Variables declaration - do not modify
        private javax.swing.JPanel BoxBtn;
        private javax.swing.JPanel BoxSearch;
        private javax.swing.JPanel BoxTitle;
        private javax.swing.JToggleButton BtnAdd;
        private javax.swing.JToggleButton BtnDetail;
        private javax.swing.JToggleButton BtnExportExcel;
        private javax.swing.JToggleButton BtnImportExcel;
        private javax.swing.JButton BtnRefresh;
        private javax.swing.JToggleButton BtnRemove;
        private javax.swing.JComboBox<String> Filter;
        private javax.swing.JTextField InputSearch;
        private javax.swing.JPanel SupplierCenter;
        private javax.swing.JPanel SupplierTop;
        private javax.swing.JTable TableSupplier;
        private javax.swing.JLabel TitleLabel;
        private javax.swing.JScrollPane jScrollPane1;
        // End of variables declaration
}
