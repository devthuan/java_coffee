package com.project.GUI;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

import java.awt.Cursor;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.project.BUS.DeliveryBillBUS;
import com.project.BUS.EmployeeBUS;
import com.project.BUS.EnterCouponBUS;
import com.project.BUS.SupplierBUS;
import com.project.Common.Common;
import com.project.DTO.DeliveryBillDTO;
import com.project.DTO.EnterCouponDTO;
import com.project.DTO.PermissionAccount;
import com.project.DTO.SupplierDTO;
import com.project.Util.Formatter;
import com.toedter.calendar.JDateChooser;

/**
 *
 * @author thuan
 */
public class DeliveryBill extends javax.swing.JPanel {
    private int option_search = 0;
    private PermissionAccount permissionList;
    private ArrayList<DeliveryBillDTO> list_deliveryBills; // array
    private EmployeeBUS empBUS = new EmployeeBUS();

    /**
     * Creates new form Supplier
     */
    public DeliveryBill() {
        initComponents();
        permissionList = PermissionAccount.getInstance();

        list_deliveryBills = DeliveryBillBUS.getAllDeliveryBill();

        loadData(list_deliveryBills);
    }

    private void loadData(ArrayList<DeliveryBillDTO> list_deliveryBills) {

        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        model.addColumn("ID");
        model.addColumn("Tên phiếu xuất");
        model.addColumn("Nhân viên");
        model.addColumn("Tổng số KG");
        model.addColumn("Ngày tạo");

        for (DeliveryBillDTO deliveryBill : list_deliveryBills) {
            Object[] rowData = {
                    deliveryBill.getId(),
                    deliveryBill.getNameDeliveryBill(),
                    deliveryBill.getNameEmployee(),
                    Formatter.getFormatedPrice(deliveryBill
                            .getAmount()),
                    Common.formatedDateTime(deliveryBill.getCreatedAt()),
            };
            model.addRow(rowData);
        }
        TableDeliveryBill.setModel(model);
        Formatter.setBoldHeaderTable(TableDeliveryBill);
        Formatter.centerAlignTableCells(TableDeliveryBill);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        ReceiptTop = new javax.swing.JPanel();
        BoxBtn = new javax.swing.JPanel();
        BtnAdd = new javax.swing.JButton();
        BtnDetail = new javax.swing.JButton();
        BtnDelete = new javax.swing.JButton();
        BtnExport = new javax.swing.JButton();
        BoxSearch = new javax.swing.JPanel();
        Filter = new javax.swing.JComboBox<>();
        BtnRefresh = new javax.swing.JButton();
        InputSearch = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ReceiptCenter = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        BoxFilter = new javax.swing.JPanel();
        ContentFilter = new javax.swing.JPanel();
        ItemFilterStartDay = new javax.swing.JPanel();
        TitleStartDay = new javax.swing.JLabel();
        ValueStart = new JDateChooser();
        ItemFilterEndDay = new javax.swing.JPanel();
        titleEndDay = new javax.swing.JLabel();
        ValueEndDay = new JDateChooser();
        ItemFilterTotalReceiptStart = new javax.swing.JPanel();
        TitleTotalStart = new javax.swing.JLabel();
        ValueTotalStart = new javax.swing.JTextField();
        ItemFilterTotalReceiptEnd = new javax.swing.JPanel();
        TitleTotalEnd = new javax.swing.JLabel();
        ValueTotalEnd = new javax.swing.JTextField();
        BtnFilter = new javax.swing.JButton();
        BoxTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableDeliveryBill = new javax.swing.JTable();

        BtnAdd.setCursor(new java.awt.Cursor(Cursor.HAND_CURSOR));
        BtnDetail.setCursor(new java.awt.Cursor(Cursor.HAND_CURSOR));
        BtnDelete.setCursor(new java.awt.Cursor(Cursor.HAND_CURSOR));
        BtnExport.setCursor(new java.awt.Cursor(Cursor.HAND_CURSOR));
        BtnFilter.setCursor(new java.awt.Cursor(Cursor.HAND_CURSOR));
        BtnRefresh.setCursor(new java.awt.Cursor(Cursor.HAND_CURSOR));

        setMinimumSize(new java.awt.Dimension(1085, 768));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(1085, 768));
        setLayout(new java.awt.BorderLayout(0, 5));

        ReceiptTop.setBackground(new java.awt.Color(255, 255, 255));
        ReceiptTop.setPreferredSize(new java.awt.Dimension(608, 170));

        BoxBtn.setBackground(new java.awt.Color(255, 255, 255));
        BoxBtn.setPreferredSize(new java.awt.Dimension(380, 45));

        BoxBtn.setLayout(new java.awt.GridLayout(1, 4, 10, 0));

        BtnAdd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BtnAdd.setIcon(new javax.swing.ImageIcon("./src/assets/icon/plus.png")); // NOI18N
        BtnAdd.setText("Thêm");
        BtnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BtnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAddActionPerformed(evt);
            }
        });
        BoxBtn.add(BtnAdd);

        BtnDetail.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BtnDetail.setIcon(new javax.swing.ImageIcon("./src/assets/icon/info-rgb.png")); // NOI18N
        BtnDetail.setText("Chi tiết");
        BtnDetail.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BtnDetail.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BtnDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDetailActionPerformed(evt);
            }
        });
        BoxBtn.add(BtnDetail);

        BtnDelete.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BtnDelete.setIcon(new javax.swing.ImageIcon("./src/assets/icon/cancel.png")); // NOI18N
        BtnDelete.setText("Xoá");
        BtnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BtnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteActionPerformed(evt);
            }
        });
        BoxBtn.add(BtnDelete);

        BtnExport.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BtnExport.setIcon(new javax.swing.ImageIcon("./src/assets/icon/xls.png")); // NOI18N
        BtnExport.setText("Xuất excel");
        BtnExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BtnExport.setMargin(new java.awt.Insets(2, 1, 2, 1));
        BtnExport.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BtnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnExportActionPerformed(evt);
            }
        });
        BoxBtn.add(BtnExport);

        BoxSearch.setBackground(new java.awt.Color(255, 255, 255));

        Filter.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        Filter.setModel(
                new javax.swing.DefaultComboBoxModel<>(
                        new String[] { "ID tăng dần", "ID giảm dần", "Tăng dần tổng số kg",
                                "Giảm dần tổng số kg" }));
        Filter.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterActionPerformed(evt);
            }
        });

        BtnRefresh.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BtnRefresh.setIcon(new javax.swing.ImageIcon("./src/assets/icon/refresh.png")); // NOI18N
        BtnRefresh.setText("Làm mới");
        BtnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnRefreshActionPerformed(evt);
            }
        });

        InputSearch.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        // InputSearch.setText("Tìm kiếm....");
        Formatter.setPlaceHolder(InputSearch, "Nhập từ khóa tìm kiếm");

        InputSearch.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                handleChangeInputSearch();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                handleChangeInputSearch();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                handleChangeInputSearch();
            }

        });

        javax.swing.GroupLayout BoxSearchLayout = new javax.swing.GroupLayout(BoxSearch);
        BoxSearch.setLayout(BoxSearchLayout);
        BoxSearchLayout.setHorizontalGroup(
                BoxSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BoxSearchLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE, 130,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(InputSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 221,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(BtnRefresh)));
        BoxSearchLayout.setVerticalGroup(
                BoxSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(BoxSearchLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(
                                        BoxSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE, 55,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(InputSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 55,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(BtnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 55,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(7, Short.MAX_VALUE)));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.CardLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon("./src/assets/icon/bill.png")); // NOI18N
        jLabel1.setText("Quản lý phiếu xuất");
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        jLabel1.setIconTextGap(10);
        jPanel1.add(jLabel1, "card2");

        javax.swing.GroupLayout ReceiptTopLayout = new javax.swing.GroupLayout(ReceiptTop);
        ReceiptTop.setLayout(ReceiptTopLayout);
        ReceiptTopLayout.setHorizontalGroup(
                ReceiptTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ReceiptTopLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(BoxBtn, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157,
                                        Short.MAX_VALUE)
                                .addComponent(BoxSearch, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41))
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        ReceiptTopLayout.setVerticalGroup(
                ReceiptTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReceiptTopLayout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ReceiptTopLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(BoxBtn, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(BoxSearch, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        add(ReceiptTop, java.awt.BorderLayout.PAGE_START);

        ReceiptCenter.setLayout(new javax.swing.BoxLayout(ReceiptCenter, javax.swing.BoxLayout.LINE_AXIS));

        jSplitPane1.setResizeWeight(0.1);

        BoxFilter.setPreferredSize(new java.awt.Dimension(150, 613));

        ContentFilter.setBackground(new java.awt.Color(255, 255, 255));
        ContentFilter.setMaximumSize(new java.awt.Dimension(280, 32767));
        ContentFilter.setMinimumSize(new java.awt.Dimension(200, 65));
        ContentFilter.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 15));

        ItemFilterStartDay.setBackground(new java.awt.Color(255, 255, 255));
        ItemFilterStartDay.setPreferredSize(new java.awt.Dimension(150, 70));
        ItemFilterStartDay.setLayout(new java.awt.BorderLayout(0, 5));

        TitleStartDay.setBackground(new java.awt.Color(255, 255, 255));
        TitleStartDay.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        TitleStartDay.setText("Từ ngày");
        TitleStartDay.setPreferredSize(new java.awt.Dimension(37, 25));
        ItemFilterStartDay.add(TitleStartDay, java.awt.BorderLayout.PAGE_START);

        ValueStart.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        ValueStart.setMinimumSize(new java.awt.Dimension(64, 20));
        ValueStart.setPreferredSize(new java.awt.Dimension(64, 20));
        // ValueStart.addActionListener(new java.awt.event.ActionListener() {
        // public void actionPerformed(java.awt.event.ActionEvent evt) {
        // ValueStartActionPerformed(evt);
        // }
        // });
        ItemFilterStartDay.add(ValueStart, java.awt.BorderLayout.CENTER);

        ContentFilter.add(ItemFilterStartDay);

        ItemFilterEndDay.setBackground(new java.awt.Color(255, 255, 255));
        ItemFilterEndDay.setPreferredSize(new java.awt.Dimension(150, 70));
        ItemFilterEndDay.setLayout(new java.awt.BorderLayout(0, 5));

        titleEndDay.setBackground(new java.awt.Color(255, 255, 255));
        titleEndDay.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        titleEndDay.setText("Đến ngày");
        titleEndDay.setPreferredSize(new java.awt.Dimension(37, 25));
        ItemFilterEndDay.add(titleEndDay, java.awt.BorderLayout.PAGE_START);

        ValueEndDay.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        ValueEndDay.setPreferredSize(new java.awt.Dimension(64, 20));
        ItemFilterEndDay.add(ValueEndDay, java.awt.BorderLayout.CENTER);

        ContentFilter.add(ItemFilterEndDay);

        ItemFilterTotalReceiptStart.setBackground(new java.awt.Color(255, 255, 255));
        ItemFilterTotalReceiptStart.setPreferredSize(new java.awt.Dimension(150, 70));
        ItemFilterTotalReceiptStart.setLayout(new java.awt.BorderLayout(0, 5));

        TitleTotalStart.setBackground(new java.awt.Color(255, 255, 255));
        TitleTotalStart.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        TitleTotalStart.setText("Giá trị từ");
        TitleTotalStart.setPreferredSize(new java.awt.Dimension(37, 25));
        ItemFilterTotalReceiptStart.add(TitleTotalStart, java.awt.BorderLayout.PAGE_START);

        ValueTotalStart.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        ItemFilterTotalReceiptStart.add(ValueTotalStart, java.awt.BorderLayout.CENTER);

        ContentFilter.add(ItemFilterTotalReceiptStart);

        ItemFilterTotalReceiptEnd.setBackground(new java.awt.Color(255, 255, 255));
        ItemFilterTotalReceiptEnd.setPreferredSize(new java.awt.Dimension(150, 70));
        ItemFilterTotalReceiptEnd.setLayout(new java.awt.BorderLayout(0, 5));

        TitleTotalEnd.setBackground(new java.awt.Color(255, 255, 255));
        TitleTotalEnd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        TitleTotalEnd.setText("Giá trị đến");
        TitleTotalEnd.setPreferredSize(new java.awt.Dimension(37, 25));
        ItemFilterTotalReceiptEnd.add(TitleTotalEnd, java.awt.BorderLayout.PAGE_START);

        ValueTotalEnd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        ValueTotalEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValueTotalEndActionPerformed(evt);
            }
        });
        ItemFilterTotalReceiptEnd.add(ValueTotalEnd, java.awt.BorderLayout.CENTER);

        ContentFilter.add(ItemFilterTotalReceiptEnd);

        BtnFilter.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        BtnFilter.setIcon(new javax.swing.ImageIcon("./src/assets/icon/filter-32.png")); // NOI18N
        BtnFilter.setText("Lọc");
        BtnFilter.setIconTextGap(10);
        BtnFilter.setPreferredSize(new java.awt.Dimension(100, 40));
        BtnFilter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnFilterMouseClicked(evt);
            }
        });
        ContentFilter.add(BtnFilter);

        javax.swing.GroupLayout BoxFilterLayout = new javax.swing.GroupLayout(BoxFilter);
        BoxFilter.setLayout(BoxFilterLayout);
        BoxFilterLayout.setHorizontalGroup(
                BoxFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ContentFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, Short.MAX_VALUE));
        BoxFilterLayout.setVerticalGroup(
                BoxFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ContentFilter, javax.swing.GroupLayout.Alignment.TRAILING,
                                javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE));

        jSplitPane1.setLeftComponent(BoxFilter);

        BoxTable.setLayout(new javax.swing.BoxLayout(BoxTable, javax.swing.BoxLayout.LINE_AXIS));

        TableDeliveryBill.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        TableDeliveryBill.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                        { "test", "test", "test", "test", "test" },
                        { null, null, null, null, null },
                        { null, null, null, null, null },
                        { null, null, null, null, null }
                },
                new String[] {
                        "ID", "Nhà cung cấp", "Nhân viên", "Tổng đơn hàng", "Ngày tạo"
                }));
        TableDeliveryBill.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(TableDeliveryBill);
        TableDeliveryBill.setShowGrid(true);
        BoxTable.add(jScrollPane1);

        jSplitPane1.setRightComponent(BoxTable);

        ReceiptCenter.add(jSplitPane1);

        add(ReceiptCenter, java.awt.BorderLayout.CENTER);
    }// </editor-fold>

    private void ValueTotalStartActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void handleChangeInputSearch() {
        DefaultTableModel model = (DefaultTableModel) TableDeliveryBill.getModel();
        model.setRowCount(0); // Xóa tất cả các hàng

        // Lấy danh sách nhà cung cấp mới từ SupplierBUS

        ArrayList<DeliveryBillDTO> list_deliveryBill = DeliveryBillBUS
                .searchDeliveryBillByNameBUS(InputSearch.getText());

        // Thêm dữ liệu mới vào JTable
        for (DeliveryBillDTO deliveryBill : list_deliveryBill) {
            Object[] rowData = {
                    deliveryBill.getId(),
                    deliveryBill.getNameDeliveryBill(),
                    deliveryBill.getNameEmployee(),
                    Formatter.getFormatedPrice(deliveryBill
                            .getAmount()),
                    Common.formatedDateTime(deliveryBill.getCreatedAt()),
            };
            model.addRow(rowData);
        }
    }

    private void ValueTotalEndActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void BtnFilterMouseClicked(java.awt.event.MouseEvent evt) {
        Date startDate = ValueStart.getDate();
        Date endDate = ValueEndDay.getDate();
        String startTotalText = ValueTotalStart.getText();
        String endTotalText = ValueTotalEnd.getText();

        int startTotal = -1;
        int endTotal = -1;
        String formatedStartDate = null;
        String formatedEndDate = null;
        if (startDate == null && endDate == null && startTotalText.isEmpty() && endTotalText.isEmpty()) {
            return;
        }

        if (startDate != null || endDate != null) {
            if (startDate == null || endDate == null) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ giá trị ngày");
                return;
            }
            if (startDate.compareTo(endDate) > 0) {
                JOptionPane.showMessageDialog(null, "Ngày bắt đầu phải nhỏ hơn ngày kết thúc");
                return;
            }

            formatedStartDate = Common.formateDate(startDate);
            formatedEndDate = Common.formateDate(endDate);

        }
        if (!startTotalText.isEmpty() || !endTotalText.isEmpty()) {
            if (startTotalText.isEmpty() || endTotalText.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ giá trị tổng hoá đơn");
                return;
            }
            try {
                startTotal = Integer.parseInt(ValueTotalStart.getText());
                endTotal = Integer.parseInt(ValueTotalEnd.getText());

                if (startTotal > endTotal) {
                    JOptionPane.showMessageDialog(null,
                            "Tổng tiền bắt đầu phải nhỏ hơn tổng tiền kết thúc.");
                    return;
                }

            } catch (Exception e) {

                JOptionPane.showMessageDialog(null, "Nhập dữ liệu là số");
                return;
            }

        }

        // System.out.println(formatedStartDate);
        // System.out.println(formatedEndDate);
        // System.out.println(startTotal);
        // System.out.println(endTotal);

        DefaultTableModel model = (DefaultTableModel) TableDeliveryBill.getModel();
        model.setRowCount(0); // Xóa tất cả các hàng

        ArrayList<DeliveryBillDTO> list_DeliveryBill = DeliveryBillBUS.searchDeliveryBillAdvanced(formatedStartDate,
                formatedEndDate, startTotal, endTotal);
        if (list_DeliveryBill == null) {
            JOptionPane.showMessageDialog(null, "Có lỗi xảy ra!");
            return;
        }
        for (DeliveryBillDTO deliveryBill : list_DeliveryBill) {
            Object[] rowData = {
                    deliveryBill.getId(),
                    deliveryBill.getNameDeliveryBill(),
                    deliveryBill.getNameEmployee(),
                    Formatter.getFormatedPrice(deliveryBill
                            .getAmount()),
                    Common.formatedDateTime(deliveryBill.getCreatedAt()),
            };
            model.addRow(rowData);
        }
    }

    private void BtnAddActionPerformed(java.awt.event.ActionEvent evt) {
        if (empBUS.getEmpByAccountID(permissionList.getAccountId()) == null) {
            JOptionPane.showMessageDialog(null, "Tài khoản của bạn chưa cập nhật thông tin nhân viên!",
                    "Thông báo",
                    JOptionPane.INFORMATION_MESSAGE);
            return;

        }
        if (permissionList.hasPermission("READ_WAREHOUSE_DISPATCH_NOTE")) {
            new FormCreateDeliveryBill().setVisible(true);

        } else {
            JOptionPane.showMessageDialog(null, "Bạn không có quyền truy cập");
            return;
        }
    }

    private void BtnDetailActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = TableDeliveryBill.getSelectedRow();
        if (selectedRow != -1) {

            try {
                int id = (int) TableDeliveryBill.getValueAt(selectedRow, 0);
                for (DeliveryBillDTO deliveryBillDTO : list_deliveryBills) {
                    if (deliveryBillDTO.getId() == id) {
                        new FormDetailDeliveryBill(deliveryBillDTO).setVisible(true);

                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Lỗi: ID không hợp lệ.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng để xem chi tiết.");
        }
    }

    private void BtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        if (permissionList.hasPermission("DELETE_WAREHOUSE_DISPATCH_NOTE")) {
            int selectedRow = TableDeliveryBill.getSelectedRow();
            if (selectedRow != -1) {
                try {
                    int id = (int) TableDeliveryBill.getValueAt(selectedRow, 0);
                    String createdAString = (String) TableDeliveryBill.getValueAt(selectedRow, 4);
                    // Hiển thị hộp thoại xác nhận
                    int option = JOptionPane.showConfirmDialog(null,
                            "Bạn có chắc chắn muốn xoá phiếu xuất này?", "Xác nhận xoá",
                            JOptionPane.YES_NO_OPTION);
                    if (option == JOptionPane.YES_OPTION) {
                        boolean check_remove = DeliveryBillBUS.removeDeliveryBillBUS(id, createdAString);
                        if (check_remove) {
                            JOptionPane.showMessageDialog(null,
                                    "Phiếu xuất đã được xoá thành công.");
                            // Nếu xoá thành công, cập nhật lại JTable hoặc các thành phần khác cần
                            // thiết
                        }
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Lỗi: ID không hợp lệ.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng để xem chi tiết.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Bạn không có quyền truy cập");
            return;
        }

    }

    private void BtnExportActionPerformed(java.awt.event.ActionEvent evt) {
        if (permissionList.hasPermission("EXPORT_WAREHOUSE_DISPATCH_NOTE")) {
            exportToExcel();

        } else {
            JOptionPane.showMessageDialog(null, "Bạn không có quyền truy cập");
            return;
        }
    }

    private void BtnRefreshActionPerformed(java.awt.event.ActionEvent evt) {
        // Xóa dữ liệu hiện tại trong JTable
        DefaultTableModel model = (DefaultTableModel) TableDeliveryBill.getModel();
        model.setRowCount(0); // Xóa tất cả các hàng

        InputSearch.setText("");
        ValueStart.setDate(null);
        ValueEndDay.setDate(null);
        ValueTotalStart.setText("");
        ValueTotalEnd.setText("");

        // Lấy danh sách nhà cung cấp mới từ SupplierBUS
        ArrayList<DeliveryBillDTO> list_deliveryBills = DeliveryBillBUS.getAllDeliveryBill();

        // Thêm dữ liệu mới vào JTable
        for (DeliveryBillDTO deliveryBill : list_deliveryBills) {
            Object[] rowData = {
                    deliveryBill.getId(),
                    deliveryBill.getNameDeliveryBill(),
                    deliveryBill.getNameEmployee(),
                    Formatter.getFormatedPrice(deliveryBill
                            .getAmount()),
                    Common.formatedDateTime(deliveryBill.getCreatedAt()),
            };
            model.addRow(rowData);
        }

    }

    private void FilterActionPerformed(java.awt.event.ActionEvent evt) {
        int option = Filter.getSelectedIndex();
        InputSearch.requestFocus();

        DefaultTableModel model = (DefaultTableModel) TableDeliveryBill.getModel();
        model.setRowCount(0); // Xóa tất cả các hàng

        if (option == 0) {

            list_deliveryBills.sort(Comparator.comparing(DeliveryBillDTO::getId));

        } else if (option == 1) {
            list_deliveryBills.sort(Comparator.comparing(DeliveryBillDTO::getId).reversed());

        } else if (option == 2) {
            list_deliveryBills.sort(Comparator.comparing(DeliveryBillDTO::getAmount));

        } else if (option == 3) {
            list_deliveryBills.sort(Comparator.comparing(DeliveryBillDTO::getAmount).reversed());

        }

        for (DeliveryBillDTO deliveryBill : list_deliveryBills) {
            Object[] rowData = {
                    deliveryBill.getId(),
                    deliveryBill.getNameDeliveryBill(),
                    deliveryBill.getNameEmployee(),
                    Formatter.getFormatedPrice(deliveryBill
                            .getAmount()),
                    Common.formatedDateTime(deliveryBill.getCreatedAt()),
            };
            model.addRow(rowData);
        }
    }

    private void exportToExcel() {
        JFileChooser fileChooser = new JFileChooser(); // Tạo một JFileChooser

        // Thiết lập hộp thoại để chọn tệp và đặt tiêu đề
        fileChooser.setDialogTitle("Chọn nơi lưu tệp Excel");

        int userSelection = fileChooser.showSaveDialog(this); // Hiển thị hộp thoại và chờ người dùng chọn nơi
                                                              // lưu

        // Kiểm tra xem người dùng đã chọn "Save" hay chưa
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            try {
                File fileToSave = fileChooser.getSelectedFile(); // Lấy đường dẫn được chọn bởi người
                                                                 // dùng

                // Ghi dữ liệu vào tệp Excel
                try (Workbook workbook = new XSSFWorkbook()) {
                    Sheet sheet = workbook.createSheet("Sheet1");

                    // Lấy mô hình của JTable
                    DefaultTableModel model = (DefaultTableModel) TableDeliveryBill.getModel();
                    // Viết tiêu đề cột
                    Row headerRow = sheet.createRow(0);
                    for (int col = 0; col < model.getColumnCount(); col++) {
                        headerRow.createCell(col).setCellValue(model.getColumnName(col));
                    }

                    // Viết dữ liệu từ JTable vào tệp Excel
                    for (int row = 0; row < model.getRowCount(); row++) {
                        Row excelRow = sheet.createRow(row + 1); // Bắt đầu từ hàng thứ 2 (hàng
                                                                 // đầu tiên là tiêu đề)
                        for (int col = 0; col < model.getColumnCount(); col++) {
                            Object cellValue = model.getValueAt(row, col);
                            if (cellValue != null) {
                                Cell excelCell = excelRow.createCell(col);
                                if (cellValue instanceof String) {
                                    excelCell.setCellValue((String) cellValue);
                                } else if (cellValue instanceof Integer) {
                                    excelCell.setCellValue((Integer) cellValue);
                                } else if (cellValue instanceof LocalDate) {
                                    System.out.println(cellValue);
                                    String stringValue = ((LocalDate) cellValue)
                                            .format(DateTimeFormatter
                                                    .ofPattern("yyyy-MM-dd"));
                                    excelCell.setCellValue(stringValue);
                                } // Và có thể thêm các kiểu dữ liệu khác tùy theo nhu
                                  // cầu
                            }
                        }
                    }

                    // Ghi vào tệp Excel
                    try (FileOutputStream outputStream = new FileOutputStream(
                            fileToSave + ".xlsx")) {
                        workbook.write(outputStream);
                    }
                    JOptionPane.showMessageDialog(null, "Xuất file excel thành công.");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    // Variables declaration - do not modify
    private javax.swing.JPanel BoxBtn;
    private javax.swing.JPanel BoxFilter;
    private javax.swing.JPanel BoxSearch;
    private javax.swing.JPanel BoxTable;
    private javax.swing.JButton BtnAdd;
    private javax.swing.JButton BtnDelete;
    private javax.swing.JButton BtnDetail;
    private javax.swing.JButton BtnExport;
    private javax.swing.JButton BtnFilter;
    private javax.swing.JButton BtnRefresh;
    private javax.swing.JPanel ContentFilter;
    private javax.swing.JComboBox<String> Filter;
    private javax.swing.JTextField InputSearch;
    private javax.swing.JPanel ItemFilterEndDay;
    private javax.swing.JPanel ItemFilterStartDay;
    private javax.swing.JPanel ItemFilterTotalReceiptEnd;
    private javax.swing.JPanel ItemFilterTotalReceiptStart;
    private javax.swing.JPanel ReceiptCenter;
    private javax.swing.JPanel ReceiptTop;
    private javax.swing.JTable TableDeliveryBill;
    private javax.swing.JLabel TitleStartDay;
    private javax.swing.JLabel TitleTotalEnd;
    private javax.swing.JLabel TitleTotalStart;
    private JDateChooser ValueEndDay;
    private JDateChooser ValueStart;
    private javax.swing.JTextField ValueTotalEnd;
    private javax.swing.JTextField ValueTotalStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel titleEndDay;
    // End of variables declaration
}
